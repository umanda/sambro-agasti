<?php/** * * This library helps in parsing and triggering functions based on SMS Input. A vital component of the framework. * Developers are required to use this library to facilitate SMS based transactions with the Sahana Core. * * * PHP version 4 and 5 * * LICENSE: This source file is subject to LGPL license * that is available through the world-wide-web at the following URI: * http://www.gnu.org/copyleft/lesser.html * * @package    framework * @subpackage messaging * @author     Ajay Kumar <ajuonline at gmail dot com><aj at mindtakers dot com> * @copyright  Lanka Software Foundation - http://www.opensource.lk * @version    $Id: lib_sms_handler.inc,v 1.2 2008/09/15 13:50:13 franboon Exp $ * @license    http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License (LGPL) * */global $global;include_once $global['approot']."/mod/msg/lib_sms_errors.inc";include_once $global['approot']."/mod/msg/lib_sms_keywords.inc";/** * This function will parse the incoming message string sent via GET & POST * Currently this function will be used by Kannel and SMSTools * It returns the array containing all words/strings, as single array values, sent in the SMS seperated by a SPACE * For e.g. For a message string i.e. $message = "login user pass"; * $parsed_message[0]="login" * $parsed_message[1]="user" * $parsed_message[2]="pass" */function _shn_msg_parse_short_message($message){    $parsed_message=array();    $parsed_message = explode(" ", $message);    return $parsed_message;}/** * This function will check the first word of the incoming message string * and return the corresponding menu value only. * For. e.g. as per our keyword definition file */function _shn_msg_sms_keyword_check($keyword, $sender){    global $global;    global $sms_list_keywords;    if(is_numeric($keyword)){         if(array_key_exists($keyword, $sms_list_keywords)){            $keyword_check_result = array ('return' => '1', 'type' => 'number');            //echo " Key word valid and is number";            return $keyword_check_result;        }        else{            $error_message = _shn_msg_sms_error_code(1);            include_once $global['approot']."/mod/msg/plugins/"."$plugin_name"."/handler_"."$plugin_name".".inc";            $recipients = array ($sender);//handler_plugin.inc send sms function accepts array as input for recipients            shn_msg_plugin_send_sm($recipients, $error_message);            //shn_msg_store_sent_messages($recipients, $error_message); @todo check the current storage mechanism. smstools_log table            //echo "<br \>Error SMS: ".$error_message;            return 0;        }    }    else{        $bool = array_search($keyword, $sms_list_keywords);        if(array_search($keyword, $sms_list_keywords)){            $keyword_check_result = array ('return' => '1', 'type' => 'word');            //echo " key word is valid and is WORD";            return $keyword_check_result;        }        else{            $error_message = _shn_msg_sms_error_code(1);            include_once $global['approot']."/mod/msg/plugins/"."$plugin_name"."/handler_"."$plugin_name".".inc";            $recipients = array ($sender);//handler_plugin.inc send sms function accepts array as input for recipients            shn_msg_plugin_send_sm($recipients, $error_message);            //shn_msg_store_sent_messages($recipients, $error_message); @todo check the current storage mechanism. smstools_log table            //echo "<br \> Error SMS: ".$error_message;            return 0;        }    }}/** * This function will check the first word of the incoming message string * and return the corresponding menu value only. * For. e.g. as per our keyword definition file */function _shn_msg_sms_action($parsed_sms, $sender_phone_number){       global $global;    if(("help"==$parsed_sms[0]) || ("911"==$parsed_sms[0])){        _shn_msg_sms_help($parsed_sms, $sender_phone_number);        }             elseif(("login"==$parsed_sms[0]) || ("100"==$parsed_sms[0])){        _shn_msg_sms_login($parsed_sms, $sender_phone_number);        }    elseif(("sm"==$parsed_sms[0]) || ("3"==$parsed_sms[0])){        if("search"==$parsed_sms[1]){            require_once $global['approot'] . "/inc/lib_gis/gis_fns.inc";            $keys = array('all' => '1');            $features = shn_gis_get_features_in_radius($keys, $parsed_sms[2], $parsed_sms[3], $parsed_sms[4]);            //print_r($features);            $count = count($features);            //echo "<br /> $count <br />";                        if($count){                $final_results = array();                $i = 1;                $message = "Results Found:\n";                foreach($features as $a){                                            //$coords = shn_gis_coord_decode($a[f_coords]);                //print_r($coords); @ returns 2 values for 1 input. needed to check with GIS fns and figure out a way                array_push($final_results, array("$a[f_name]", "$a[f_description]", "$a[f_coords]", "$a[f_event_date]"));                $message .= "$i. Name - $a[f_name]\nDescription: $a[f_description]\nGPS Loc: $a[f_coords]\nTimeStamp: $a[f_event_date]\n";                $i++;                }            }            else{                $message = "No Situations Found! Please try modifying your search.";            }                        //print_r($final_results);                        }        elseif("add"==$parsed_sms[1]){                //Valid Input SMS format "sm add <name> <description> <gps_coords>"                //Sample: "sm add (First Situation) (Description of the first situation) (77,78)"                //Restructre parsed SMS Text                                $full_sms_input_text = implode(" ", $parsed_sms);                //Re-parsing as per Standard SM ADD format mentioned above                //$value = "sm add (First Situation) (Description of the first situation) (77,78)";                if (ereg ("(sm) (add) \((.+)\) \((.+)\) \(([0-9]{2,3}),([0-9]{2,3})\)", $full_sms_input_text, $regs))                    {                        //print_r($regs);                                                    // Include for the GIS Database API.                        require_once $global['approot']."/inc/lib_security/lib_sms_auth.inc";                        print_r($_SESSION);                        $f_name = $regs[3];                        $f_description = $regs[4];                        $f_author = shn_get_user_details($user_data['user_id']);;                        $f_event_date = date("Y-m-d H:i:s");                        $marker_x_lat_coordinate = $regs[5];                        $marker_y_lng_coordinate = $regs[6];                        require_once $global['approot']."/inc/lib_gis/gis_fns.inc";                        // Parse the Coordinates to wkt format.                        $coords_center = array($marker_x_lat_coordinate, $marker_y_lng_coordinate, 0);                        $coords = array($coords_center, $coords_center);                        $coordinates = shn_gis_coord_encode($coords, 'point');                          // Register the values that will make the new feature as an array of key => values.                        $keys_ = array(                              'f_type'          =>  'point',                            'f_projection'    => 'EPSG:900913',                            'f_coords'        =>  $coordinates,                            'f_name'          =>  $f_name,                            'f_description'   =>  $f_description,                            'f_author'        =>  $f_author,                            'f_event_date'    =>  $f_event_date,                        );                    //    print_r($keys_);                    // Create the Feature.                        shn_gis_create_feature($keys_);                                        } else {                    $message = "Invalid Input format for SM Add";                }            }            else{        $message = "Invalid Keyword for SM Module sent. Please retry or send HELP SM to get list of valid arguements.";        }        include_once $global['approot']."/mod/msg/plugins/"."$plugin_name"."/handler_"."$plugin_name".".inc";        $recipients = array ($sender_phone_number);//handler_plugin.inc send sms function accepts array as input for recipients        if($message) shn_msg_plugin_send_sm($recipients, $message);        //shn_msg_store_sent_messages($recipients, $error_message); @todo check the current storage mechanism. smstools_log table        //echo "<br \> Error SMS: ".$error_message;        return 0;            }            else{        $error_message = _shn_msg_sms_error_code(1);        include_once $global['approot']."/mod/msg/plugins/"."$plugin_name"."/handler_"."$plugin_name".".inc";        $recipients = array ($sender_phone_number);//handler_plugin.inc send sms function accepts array as input for recipients        shn_msg_plugin_send_sm($recipients, $error_message);        //shn_msg_store_sent_messages($recipients, $error_message); @todo check the current storage mechanism. smstools_log table        //echo "<br \> Error SMS: ".$error_message;        return 0;        }        }/*** Function calls specific to the keyword sent are listed here. Module writers should write module specific calls * modified for the purpose of SMS here. * E.g. The function should return values which can later be formatted as plain text. No HTML output should be returned as is the case * right now for the Sahana core functions which concentrate on the Web App  */  /** Action Building Main Menu ***/function _shn_msg_sms_menu(){        global $sms_list_keywords;    $sms_main_menu = "Sahana Main Menu: \nNumeric Code - Word Code\n";    foreach ($sms_list_keywords as $k => $v) {        $sms_main_menu .= "[$k] -  $v\n";    }    return $sms_main_menu;}    /** Action Help - Keyword == help or Numeric Code == 911 **/function _shn_msg_sms_help($parsed_sms, $sender_phone_number){    global $global;    $sms_main_menu = _shn_msg_sms_menu();    include_once $global['approot']."/mod/msg/plugins/"."$plugin_name"."/handler_"."$plugin_name".".inc";    $recipients = array ($sender_phone_number);//handler_plugin.inc send sms function accepts array as input for recipients    shn_msg_plugin_send_sm($recipients, $sms_main_menu);    //shn_msg_store_sent_messages($recipients, $error_message); @todo check the current storage mechanism. smstools_log table    //echo "<br \> Error SMS: ".$error_message;    return 0;    }   /** Action Login - Keyword == login or Numeric Code == 100 **/function _shn_msg_sms_login($parsed_sms, $sender_phone_number){    global $global;    require_once $global['approot']."/inc/lib_security/lib_sms_auth.inc";    $user_data = _shn_authenticate_user($parsed_sms);    shn_session_change($user_data);    //print_r($user_data);    if(!$user_data['error_code']){    $full_name = shn_get_user_details($user_data['user_id']);    //echo "<br \>Welcome, <strong>".$full_name."</strong> you are logged in to Sahana System via SMS. yAy!! <br \>";    $message = "Welcome, ".$full_name." you are logged in to Sahana System via SMS.\n";     $sms_main_menu = _shn_msg_sms_menu();    $sms_to_send = $message . $sms_main_menu;    include_once $global['approot']."/mod/msg/plugins/"."$plugin_name"."/handler_"."$plugin_name".".inc";    $recipients = array ($sender_phone_number);//handler_plugin.inc send sms function accepts array as input for recipients    shn_msg_plugin_send_sm($recipients, $sms_to_send);    //shn_msg_store_sent_messages($recipients, $error_message); @todo check the current storage mechanism. smstools_log table    //echo "<br \> Error SMS: ".$error_message;    return 0;           //print_r($_SESSION);    $sessid = session_id();    //echo $sessid;    }       }?>